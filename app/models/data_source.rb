#
# microphisher - a spear phishing support tool
#
# Created by Ulisses Albuquerque & Joaquim Espinhara
# Copyright (C) 2013 Trustwave Holdings, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'twitter'

class DataSource
  include Mongoid::Document

  # Attribute listing
  field :user_id, type: String
  field :last_crawl, type: DateTime
  field :status, type: String, default: 'pending'
  
  # Validations
  validates :user_id, presence: true
  validates_each :user_id do |record, attr, value|
    twitter = Twitter.new(record.unknown_subject.user.access_token)
    record.errors.add attr, 'is not a Twitter user' unless twitter.is_valid_user?(value)
  end
  
  # Relations
  belongs_to :unknown_subject
  has_many :status_updates
  
  def twitter_profile_url
    "https://www.twitter.com/#{user_id}"
  end

  def fetch_status_updates!
    self.set(:status, 'indexing')
    
    begin
      twitter = Twitter.new(unknown_subject.user.access_token)
      twitter.tweets(self.user_id) do |tweet|
        unless status_updates.find_by(id_str: tweet['id_str'])
          # HACK: We skip the ID attribute because those should be
          # autogenerated by Mongoid/MongoDB, otherwise relations do
          # not work properly
          status_update = status_updates.new
          tweet.each { |k,v| status_update[k] = v unless k.match(/^id$/) }
          status_update.save
        end
      end
    rescue Exception => exception
      logger.error("Exception indexing #{self.user_id}: #{exception.to_s}")
    end
    
    self.set(:status, 'complete')
    self.set(:last_crawl, DateTime.now)
    self.save!
  end
end
